calc.l


/*
yacc -d calc.y
flex calc.l
gcc lex.yy.c y.tab.c
./a.out
*/

%{
	#include "y.tab.h"
	extern int yylval;  
%}

%%

[0-9]+ {yylval=atoi(yytext); 
return NUM;
}   

\n   {return 0;}

.     {return yytext[0];}   

%%


calc.y


%{
	#include <stdio.h>
	#include <math.h>
	#include <stdlib.h>
%}
%token NUM
%left '+' '-'

%%

stmt : exp   {printf("\n Answer: %d \n", $1);}  
	;

exp :	exp '+' exp {$$=$1+$3;}     
	| exp '-' exp {$$=$1-$3;}
	| exp '*' exp {$$=$1*$3;}
	| exp '/' exp {$$=$1/$3;}
	| NUM	{$$=$1;}    
	;   

%%

int main()
{
	printf("Enter the arithmetic expression \n");
	yyparse();
	printf("Valid expression! ");
	return 0;

}

yyerror()
{
 printf("Invalid expression!");
 exit(0);
}

int yywrap()
{
 return 1;
}
